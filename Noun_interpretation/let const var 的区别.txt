1. var 
作用域： var声明的变量拥有函数作用域，如果在函数外部声明，他将具有全局作用域。 
在全局作用域下使用var声明的变量会被附加到windown对象上
    变量提升: var声明的变量会发生变量提升（hoisting），意味着无论在函数的哪个部分声明
，它们都会被移动到函数的顶部。

    重复声明: 使用var可以重复声明同一个变量。

    重新赋值: 使用var声明的变量可以被重新赋值。
2. let

    作用域: let声明的变量具有块级作用域（block scope），仅在声明它的代码块内有效。

    变量提升: let声明的变量也会提升，但它们不会被初始化。在代码执行到声明之前，它们是不可访问的，这个区间被称为“暂时性死区”（Temporal Dead Zone, TDZ）。

    重复声明: 在同一个作用域中，let不允许重新声明已经存在的变量。

    重新赋值: 使用let声明的变量可以被重新赋值，但不能重复声明。

3. const

    作用域: 与let相同，const声明的变量也具有块级作用域。

    变量提升: const同样会提升到块的顶部，但是在声明语句之前它们也是不可访问的，存在于“暂时性死区”中。

    重复声明: const不允许在相同作用域内重复声明变量。

    重新赋值: const声明的变量不能被重新赋值，它们必须在声明时初始化，并且声明后值是固定的。
但是，如果const变量指向的是一个对象或数组，那么对象或数组的内容是可以被修改的。

附加在window对象上

在浏览器环境中，全局作用域下使用var声明的变量会成为window对象的属性。这意味着，
如果你声明了var dog = 'bowser'，实际上你添加了一个新的全局变量dog到window对象上，
你可以通过window.dog访问到它，并且会得到'bowser'这个值。

相比之下，let和const声明的变量则不会被添加到window对象。这有助于避免全局命名空间的污染
，也让变量的控制范围更加严格。